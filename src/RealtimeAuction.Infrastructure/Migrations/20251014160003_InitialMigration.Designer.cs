// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RealtimeAuction.Infrastructure;

#nullable disable

namespace RealtimeAuction.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251014160003_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RealtimeAuction.Domain.Models.Auction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AuctionTimeInSeconds")
                        .HasColumnType("integer");

                    b.Property<Guid?>("HighestBid")
                        .HasColumnType("uuid");

                    b.Property<decimal>("HighestBidAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("LatestBidDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("numeric");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PriceIncrement")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("StartingPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Draft");

                    b.ComplexProperty<Dictionary<string, object>>("Address", "RealtimeAuction.Domain.Models.Auction.Address#Address", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("AddressLine")
                                .IsRequired()
                                .HasMaxLength(180)
                                .HasColumnType("character varying(180)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("character varying(5)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("AuctionItem", "RealtimeAuction.Domain.Models.Auction.AuctionItem#AuctionItem", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Amount")
                                .HasColumnType("integer");

                            b1.Property<string>("ItemDescription")
                                .IsRequired()
                                .HasMaxLength(64)
                                .HasColumnType("character varying(64)");

                            b1.Property<string>("ItemName")
                                .IsRequired()
                                .HasMaxLength(16)
                                .HasColumnType("character varying(16)");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric");
                        });

                    b.HasKey("Id");

                    b.HasIndex("HighestBid");

                    b.HasIndex("OwnerId");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("RealtimeAuction.Domain.Models.AuctionBid", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuctionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("BiddingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("UserId");

                    b.ToTable("AuctionBids");
                });

            modelBuilder.Entity("RealtimeAuction.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.ComplexProperty<Dictionary<string, object>>("Birthday", "RealtimeAuction.Domain.Models.User.Birthday#Birthday", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Day")
                                .HasColumnType("integer");

                            b1.Property<int>("Month")
                                .HasColumnType("integer");

                            b1.Property<int>("Year")
                                .HasColumnType("integer");
                        });

                    b.HasKey("Id");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RealtimeAuction.Domain.Models.Auction", b =>
                {
                    b.HasOne("RealtimeAuction.Domain.Models.AuctionBid", null)
                        .WithMany()
                        .HasForeignKey("HighestBid");

                    b.HasOne("RealtimeAuction.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealtimeAuction.Domain.Models.AuctionBid", b =>
                {
                    b.HasOne("RealtimeAuction.Domain.Models.Auction", null)
                        .WithMany("AuctionBids")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealtimeAuction.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealtimeAuction.Domain.Models.Auction", b =>
                {
                    b.Navigation("AuctionBids");
                });
#pragma warning restore 612, 618
        }
    }
}
